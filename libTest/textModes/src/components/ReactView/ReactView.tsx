import * as React from "react";
import * as styles from "./ReactView.module.css";
import { observer } from "mobx-react-lite";
import { store } from "../../store";
import { XmlNode } from "../../../../../src/textBuilder/xmlNode/XmlNode";
import { classNames } from "../../common/classNames";
import { renderXmlNode } from "../../../../../src/textBuilder/xmlNode/renderXmlNode";

/**
 * Here all output is done via React. No DOM manipulation.
 * It is assumed that all tags are SPAN except SVG.
 * Key properties generated by IdGenerator.
 */

export const ReactView: React.FC = observer(() => {
  const { reactData, formulaStyle } = store; 
  if (!reactData) return null;
  const { nodes = [] } = reactData;
  return (
    <div className={styles.box}>
      <div>
        <SelectedSrcCode />
      </div>
      <div>
        <span className="echem-formula" style={formulaStyle}>
          {nodes.map(n => renderNode(n))}
        </span>
      </div>
    </div>
  );
});

const renderNode = (node: XmlNode): React.ReactNode => {
  const { tag, content, attrs={} } = node;
  const {id, class: cls, style=""} = attrs;
  const objStyle = style
    .split(";")
    .map(c => c.split(":"))
    .filter(a => a.length === 2)
    .reduce((acc, [k,v]) => ({...acc, [k!.trim()]: v!.trim()}), {});

  const onNodeEnter: React.MouseEventHandler<HTMLSpanElement> = (e => {
    const srcMap = store.reactData?.srcMap;
    const mapItem = srcMap?.[id!];
    if (store.onTextNode(mapItem?.txtNode)) {
      e.stopPropagation();
    }
  })
  if (tag === "span") {
    return (
      <span 
        key={id!} 
        className={cls} 
        style={objStyle}
        onMouseEnter={onNodeEnter}
        onMouseLeave={() => store.onTextNode(undefined)}
      >
        {typeof content === "string" && content}
        {Array.isArray(content) && content.map(n => renderNode(n))}
      </span>
    );
  }
  if (tag === "svg") {
    // Здесь сделано предположение, что внутри svg-тега лежит всегда один тег path
    return <svg key="svg" {...attrs}>
      {Array.isArray(content) && content[0]?.tag === "path" && <path d={content[0].attrs?.d} />}
    </svg>
  }
  return null;
}

const SelectedSrcCode: React.FC = observer(() => {
  const {expr, selectionPos} = store;
  if (!expr) return null;
  const {src} = expr;
  let srcPos = 0;
  const chunks: [string, string, boolean][] = [];
  selectionPos.forEach(({begin, end}) => {
    if (srcPos < begin) {
      const prefix = src.slice(srcPos, begin);
      chunks.push([`${srcPos}:${prefix}`, prefix, false]);
    }
    const sel = src.slice(begin, end);
    chunks.push([`${begin}:${sel}`, sel, true]);
    srcPos = end;
  });
  if (srcPos < src.length) {
    chunks.push(["end", src.slice(srcPos), false]);
  }
  return (
    <code>
      {chunks.map(([key, text, selected]) => (
        <span key={key} className={classNames([[selected, styles.selected]])}>{text}</span>
      ))}
    </code>
  );
});
